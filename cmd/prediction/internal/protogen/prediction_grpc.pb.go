// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: prediction.proto

package diabetesproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PredictionService_SavePrediction_FullMethodName            = "/diabetesproto.PredictionService/SavePrediction"
	PredictionService_GetAllPredictionsByUserId_FullMethodName = "/diabetesproto.PredictionService/GetAllPredictionsByUserId"
	PredictionService_GetPredictionById_FullMethodName         = "/diabetesproto.PredictionService/GetPredictionById"
	PredictionService_DeletePredictionById_FullMethodName      = "/diabetesproto.PredictionService/DeletePredictionById"
)

// PredictionServiceClient is the client API for PredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictionServiceClient interface {
	SavePrediction(ctx context.Context, in *SavePredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
	GetAllPredictionsByUserId(ctx context.Context, in *GetAllPredictionsByUserIdRequest, opts ...grpc.CallOption) (*GetAllPredictionsByUserIdResponse, error)
	// rpc GetAllPredictionsByUserEmail(GetAllPredictionsByUserEmailRequest) returns (GetAllPredictionsByUserIdResponse) {}
	GetPredictionById(ctx context.Context, in *GetPredictionByIdRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
	DeletePredictionById(ctx context.Context, in *DeletePredictionByIdRequest, opts ...grpc.CallOption) (*DeletePredictionByIdResponse, error)
}

type predictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionServiceClient(cc grpc.ClientConnInterface) PredictionServiceClient {
	return &predictionServiceClient{cc}
}

func (c *predictionServiceClient) SavePrediction(ctx context.Context, in *SavePredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, PredictionService_SavePrediction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GetAllPredictionsByUserId(ctx context.Context, in *GetAllPredictionsByUserIdRequest, opts ...grpc.CallOption) (*GetAllPredictionsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPredictionsByUserIdResponse)
	err := c.cc.Invoke(ctx, PredictionService_GetAllPredictionsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GetPredictionById(ctx context.Context, in *GetPredictionByIdRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, PredictionService_GetPredictionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) DeletePredictionById(ctx context.Context, in *DeletePredictionByIdRequest, opts ...grpc.CallOption) (*DeletePredictionByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePredictionByIdResponse)
	err := c.cc.Invoke(ctx, PredictionService_DeletePredictionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionServiceServer is the server API for PredictionService service.
// All implementations must embed UnimplementedPredictionServiceServer
// for forward compatibility.
type PredictionServiceServer interface {
	SavePrediction(context.Context, *SavePredictionRequest) (*PredictionResponse, error)
	GetAllPredictionsByUserId(context.Context, *GetAllPredictionsByUserIdRequest) (*GetAllPredictionsByUserIdResponse, error)
	// rpc GetAllPredictionsByUserEmail(GetAllPredictionsByUserEmailRequest) returns (GetAllPredictionsByUserIdResponse) {}
	GetPredictionById(context.Context, *GetPredictionByIdRequest) (*PredictionResponse, error)
	DeletePredictionById(context.Context, *DeletePredictionByIdRequest) (*DeletePredictionByIdResponse, error)
	mustEmbedUnimplementedPredictionServiceServer()
}

// UnimplementedPredictionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPredictionServiceServer struct{}

func (UnimplementedPredictionServiceServer) SavePrediction(context.Context, *SavePredictionRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePrediction not implemented")
}
func (UnimplementedPredictionServiceServer) GetAllPredictionsByUserId(context.Context, *GetAllPredictionsByUserIdRequest) (*GetAllPredictionsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPredictionsByUserId not implemented")
}
func (UnimplementedPredictionServiceServer) GetPredictionById(context.Context, *GetPredictionByIdRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionById not implemented")
}
func (UnimplementedPredictionServiceServer) DeletePredictionById(context.Context, *DeletePredictionByIdRequest) (*DeletePredictionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictionById not implemented")
}
func (UnimplementedPredictionServiceServer) mustEmbedUnimplementedPredictionServiceServer() {}
func (UnimplementedPredictionServiceServer) testEmbeddedByValue()                           {}

// UnsafePredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictionServiceServer will
// result in compilation errors.
type UnsafePredictionServiceServer interface {
	mustEmbedUnimplementedPredictionServiceServer()
}

func RegisterPredictionServiceServer(s grpc.ServiceRegistrar, srv PredictionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPredictionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PredictionService_ServiceDesc, srv)
}

func _PredictionService_SavePrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).SavePrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_SavePrediction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).SavePrediction(ctx, req.(*SavePredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GetAllPredictionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPredictionsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GetAllPredictionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_GetAllPredictionsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GetAllPredictionsByUserId(ctx, req.(*GetAllPredictionsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GetPredictionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GetPredictionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_GetPredictionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GetPredictionById(ctx, req.(*GetPredictionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_DeletePredictionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).DeletePredictionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_DeletePredictionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).DeletePredictionById(ctx, req.(*DeletePredictionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PredictionService_ServiceDesc is the grpc.ServiceDesc for PredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diabetesproto.PredictionService",
	HandlerType: (*PredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePrediction",
			Handler:    _PredictionService_SavePrediction_Handler,
		},
		{
			MethodName: "GetAllPredictionsByUserId",
			Handler:    _PredictionService_GetAllPredictionsByUserId_Handler,
		},
		{
			MethodName: "GetPredictionById",
			Handler:    _PredictionService_GetPredictionById_Handler,
		},
		{
			MethodName: "DeletePredictionById",
			Handler:    _PredictionService_DeletePredictionById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}
